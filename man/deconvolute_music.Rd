% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MuSiC.R
\name{deconvolute_music}
\alias{deconvolute_music}
\title{MuSiC Deconvolution}
\usage{
deconvolute_music(
  bulk_gene_expression,
  single_cell_object,
  cell_type_annotations,
  markers = NULL,
  clusters = "cellType",
  samples = "SubjectName",
  select_ct = NULL,
  cell_size = NULL,
  ct_cov = FALSE,
  verbose = FALSE,
  iter_max = 1000,
  nu = 1e-04,
  eps = 0.01,
  centered = FALSE,
  normalize = FALSE
)
}
\arguments{
\item{bulk_gene_expression}{A matrix or dataframe with the bulk data. Rows
are genes, columns are samples.}

\item{single_cell_object}{A Matrix with the single-cell data. Rows are genes
and columns are samples.}

\item{cell_type_annotations}{A Vector of the cell type annotations. Has to
be in the same order as the samples in single_cell_object.}

\item{markers}{vector or list of gene names, default as NULL. If NULL, use all genes that
provided by both bulk and single cell dataset.}

\item{clusters}{character, the phenoData of single cell dataset used as clusters.}

\item{samples}{character,the phenoData of single cell dataset used as samples.}

\item{select_ct}{vector of cell types. Default as NULL. If NULL, then use all cell types
provided.}

\item{cell_size}{data.frame of cell sizes. 1st column contains the names of cell types, 2nd
column has the cell sizes per cell type. Default as NULL. If NULL, then estimate cell size from
data.}

\item{ct_cov}{logical. If TRUE, use the covariance across cell types.}

\item{verbose}{logical, default as TRUE.}

\item{iter_max}{numeric, maximum iteration number}

\item{nu}{regulation parameter, take care of weight when taking recipical.}

\item{eps}{Thredshold of convergence.}

\item{centered}{logic, substract avg of Y and D.}

\item{normalize}{logic, divide Y and D by their standard deviation.}
}
\value{
a list with elements:
\itemize{
\item Estimates of MuSiC
\item Estimates of NNLS
\item Weight of MuSiC
\item r.squared of MuSiC
\item Variance of MuSiC estimates
}
}
\description{
This function is to calculate the MuSiC deconvolution proportions.
IMPORTANT: No model is needed. Everything is done inside this method.
}
